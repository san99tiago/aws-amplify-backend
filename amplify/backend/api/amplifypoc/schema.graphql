# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Order @model {
    id: ID!
    customerID: ID! @index(name: "byCustomerByStatusByDate", sortKeyFields: ["status", "date"]) @index(name: "byCustomerByDate", sortKeyFields: ["date"])
    accountRepresentativeID: ID! @index(name: "byRepresentativebyDate", sortKeyFields: ["date"])
    productID: ID! @index(name: "byProduct", sortKeyFields: ["id"])
    status: String!
    amount: Int!
    date: String!
}

type Customer @model {
    id: ID!
    name: String!
    phoneNumber: String
    accountRepresentativeID: ID! @index(name: "byRepresentative", sortKeyFields: ["id"])
    ordersByDate: [Order] @hasMany(indexName: "byCustomerByDate", fields: ["id"])
    ordersByStatusDate: [Order] @hasMany(indexName: "byCustomerByStatusByDate", fields: ["id"])
}

type Employee @model {
    id: ID!
    name: String! @index(name: "byName", queryField: "employeeByName", sortKeyFields: ["id"])
    startDate: String!
    phoneNumber: String!
    warehouseID: ID! @index(name: "byWarehouse", sortKeyFields: ["id"])
    jobTitle: String! @index(name: "byTitle", queryField: "employeesByJobTitle", sortKeyFields: ["id"])
    newHire: String! @index(name: "newHire", queryField: "employeesNewHire", sortKeyFields: ["id"]) @index(name: "newHireByStartDate", queryField: "employeesNewHireByStartDate", sortKeyFields: ["startDate"])
}

type Warehouse @model {
    id: ID!
    employees: [Employee] @hasMany(indexName: "byWarehouse", fields: ["id"])
}

type AccountRepresentative @model {
    id: ID!
    customers: [Customer] @hasMany(indexName: "byRepresentative", fields: ["id"])
    orders: [Order] @hasMany(indexName: "byRepresentativebyDate", fields: ["id"])
    orderTotal: Int
    salesPeriod: String @index(name: "bySalesPeriodByOrderTotal", queryField: "repsByPeriodAndTotal", sortKeyFields: ["orderTotal"])
}

type Inventory @model {
    productID: ID! @primaryKey(sortKeyFields: ["warehouseID"])
    warehouseID: ID! @index(name: "byWarehouseID", queryField: "itemsByWarehouseID")
    inventoryAmount: Int!
}

type Product @model {
    id: ID!
    name: String!
    orders: [Order] @hasMany(indexName: "byProduct", fields: ["id"])
    inventories: [Inventory] @hasMany(fields: ["id"])
}

# ADDED AT THE END
type Query {
    customLogic(message: String): String @function(name: "fnexample-${env}")
}